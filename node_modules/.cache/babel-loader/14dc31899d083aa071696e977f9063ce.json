{"ast":null,"code":"class ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.handlecoughList = () => {\n      const message = this.createChatBotMessage(\"How would you describe your cough?\", {\n        widget: \"coughLinks\"\n      });\n      this.updateChatbotState(message);\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n\n  greet() {\n    const greetingMessage = this.createChatBotMessage(\"Hi, friend.\");\n    this.updateChatbotState(greetingMessage);\n  }\n\n  cough() {\n    const coughMessage = this.createChatBotMessage(\"How long have you had this?\");\n    this.updateChatbotState(coughMessage);\n  }\n\n  updateChatbotState(message) {\n    // NOTE: This function is set in the constructor, and is passed in      // from the top level Chatbot component. The setState function here     // actually manipulates the top level state of the Chatbot, so it's     // important that we make sure that we preserve the previous state.\n    this.setState(prevState => ({ ...prevState,\n      messages: [...prevState.messages, message]\n    }));\n  }\n\n}\n\nexport default ActionProvider;","map":{"version":3,"sources":["C:/Users/BASHSOFTS/Desktop/bash/medconsult/src/Components/Chat/ActionProvider.js"],"names":["ActionProvider","constructor","createChatBotMessage","setStateFunc","handlecoughList","message","widget","updateChatbotState","setState","greet","greetingMessage","cough","coughMessage","prevState","messages"],"mappings":"AAAA,MAAMA,cAAN,CAAqB;AACjBC,EAAAA,WAAW,CAACC,oBAAD,EAAuBC,YAAvB,EAAqC;AAAA,SAehDC,eAfgD,GAe9B,MAAM;AACtB,YAAMC,OAAO,GAAG,KAAKH,oBAAL,CACd,oCADc,EAEd;AACEI,QAAAA,MAAM,EAAE;AADV,OAFc,CAAhB;AAOA,WAAKC,kBAAL,CAAwBF,OAAxB;AACD,KAxB+C;;AAC9C,SAAKH,oBAAL,GAA4BA,oBAA5B;AACA,SAAKM,QAAL,GAAgBL,YAAhB;AACD;;AAEDM,EAAAA,KAAK,GAAG;AACN,UAAMC,eAAe,GAAG,KAAKR,oBAAL,CAA0B,aAA1B,CAAxB;AACA,SAAKK,kBAAL,CAAwBG,eAAxB;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,UAAMC,YAAY,GAAG,KAAKV,oBAAL,CAA0B,6BAA1B,CAArB;AACA,SAAKK,kBAAL,CAAwBK,YAAxB;AACD;;AAYDL,EAAAA,kBAAkB,CAACF,OAAD,EAAU;AAE9B;AAGG,SAAKG,QAAL,CAAcK,SAAS,KAAK,EACvB,GAAGA,SADoB;AACTC,MAAAA,QAAQ,EAAE,CAAC,GAAGD,SAAS,CAACC,QAAd,EAAwBT,OAAxB;AADD,KAAL,CAAvB;AAGA;;AAlCgB;;AAoCnB,eAAeL,cAAf","sourcesContent":["class ActionProvider {\r\n    constructor(createChatBotMessage, setStateFunc) {\r\n      this.createChatBotMessage = createChatBotMessage;\r\n      this.setState = setStateFunc;\r\n    }\r\n    \r\n    greet() {\r\n      const greetingMessage = this.createChatBotMessage(\"Hi, friend.\")\r\n      this.updateChatbotState(greetingMessage)\r\n    }\r\n  \r\n    cough() {\r\n      const coughMessage = this.createChatBotMessage(\"How long have you had this?\")\r\n      this.updateChatbotState(coughMessage)\r\n    }\r\n    \r\n    handlecoughList = () => {\r\n      const message = this.createChatBotMessage(\r\n        \"How would you describe your cough?\",\r\n        {\r\n          widget: \"coughLinks\",\r\n        }\r\n      );\r\n  \r\n      this.updateChatbotState(message);\r\n    };\r\n    updateChatbotState(message) {\r\n   \r\n  // NOTE: This function is set in the constructor, and is passed in      // from the top level Chatbot component. The setState function here     // actually manipulates the top level state of the Chatbot, so it's     // important that we make sure that we preserve the previous state.\r\n   \r\n      \r\n     this.setState(prevState => ({\r\n          ...prevState, messages: [...prevState.messages, message]\r\n      }))\r\n    }\r\n  }\r\n  export default ActionProvider;"]},"metadata":{},"sourceType":"module"}